#####################################################################
# plotcsv.py
#
# Plotting file. Performs serpentinization with brines
#
# Sanjoy Som, December 2022
#######################################################################
# Initialization
#######################################################################
import numpy as np
import pandas as pd
import os.path
import sys
import eq36python as eq
from itertools import islice
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.colors import ListedColormap, LogNorm
plt.rcParams.update({'font.size': 12})
#######################################################################
# Main plotting function
#######################################################################
def setup_and_plot_brines(plot_style,cwdpath,csv_destination,
  plot_lit=False,ax1=None, lt='k',default_label=None): #lt = line type
  allfiles  = [f for f in os.listdir(csv_destination)]
  allbrines = [x for x in allfiles if 'rb-0' in x]
  evapfile  = [x for x in allfiles if 'curve' in x]
  fig,ax1 = plt.subplots()
  #plot evaporation curve
  #open file
  try:
    df = pd.read_csv(csv_destination+evapfile[0]).fillna(0)
    df = df.set_index('Variables').T
  except:
    print(evapfile)
    print('Error: Cannot open evap file. It is either open elsewhere or does not exist.');sys.exit()
  #check if var has been set
  if 'yvar' in locals(): 
    pass
  else:
    xvar,yvar = _ask_for_plotting_variables(df)
  #get carbonates
  if (xvar == 'carbonates_out') or (yvar == 'carbonates_out'):
    df = _get_carbonates(df)
  #and plot
  df_xvar,xunit,x_var,xscale = _get_plot_units(xvar,df)
  df_yvar,yunit,y_var,yscale = _get_plot_units(yvar,df)
  plt.xlabel(' '.join([x_var,xunit]))
  plt.ylabel(' '.join([y_var,yunit]))
  plt.plot(df_xvar,df_yvar,'k',lw=2)
  #Now add the brines on top of this evaporation curve
  #check if csvs exist
  if not allfiles:
    print('Error: No csvs to process. Create them first.')
    sys.exit()
  for filecsv in allbrines:
    #open file
    df = pd.read_csv(csv_destination+filecsv).fillna(0)
    df = df.set_index('Variables')
    df = df[df.columns[-1]] #select only last column of brines
    df = df.T
    #get carbonates
    if (xvar == 'carbonates_out') or (yvar == 'carbonates_out'):
      df = _get_carbonates(df)
    #get desired label
    label = 'Aw = '+filecsv.split('-')[1]
    #------ start plot styles --------------------------------------
    df_xvar,xunit,x_var,xscale = _get_plot_units(xvar,df)
    df_yvar,yunit,y_var,yscale = _get_plot_units(yvar,df)
    #and plot
    plt.xlabel(' '.join([x_var,xunit]))
    plt.ylabel(' '.join([y_var,yunit]))
    #yvar = __force_label(yvar)
    plt.plot(df_xvar,df_yvar,'x',label=label,markersize=10,markeredgewidth=3)
    ax1.set_yscale(yscale)
    ax1.set_xscale(xscale)
    if y_var == 'pH':
      ax1.set_ylim([2,12])

    ax1.set_xscale(xscale)
    #plt.plot(df[xvar],df[yvar],'x')
    #if plot_style == 0: # 1 variable vs another
    #  _plot_vars(xvar,yvar,df,ax1,label,lw=3)
  #legend
  # Shrink current axis by 20%
  box = ax1.get_position()
  ax1.set_position([box.x0, box.y0, box.width * 0.8, box.height])
  # Put a legend to the right of the current axis
  ax1.legend(loc='center left', bbox_to_anchor=(1, 0.5),frameon=False)
  plt.show()


def setup_and_plot_vars(plot_style,cwdpath,csv_destination, 
    plot_lit=False,plot_field=False,ax1=None, lt=None,
    default_label=None,allfiles=None): #lt = line type
  if not allfiles:
    allfiles = [f for f in os.listdir(csv_destination)]
  try:
    fig,ax1 = plt.subplots()
  except:
    print('Error: Cannot connect to display. X-Window is not on.')
    sys.exit()
  #check if csvs exist
  if not allfiles:
    print('Error: No csvs to process. Create them first.')
    sys.exit()
  #begin plotting setup
  option  = 0 # zero: no group option selected
  option2 = 0 # zero: no group option selected
  y_group = False
  x_group = False
  mStyles = ["x","*","o","v","^","<",">","1","2","3","4","8","s","p",
  "P",",","h","H","+",".","X","D","d","|","_",0,1,2,3,4,5,6,7,8,9,10,11]
  #iterate over all the csvs
  fc = 0 #file counter
  for filecsv in allfiles:
    #open file
    df = pd.read_csv(csv_destination+filecsv).fillna(0)
    df = df.set_index('Variables').T
    #request user input at first iteration
    if fc == 0:
      if plot_style == 2:
        print('Numerator:')
      xvar,yvar = _ask_for_plotting_variables(df)
    #handle the group selection
    df, xvar, yvar, option, x_group, y_group = _get_species_group(df,xvar,yvar,option, x_group, y_group)
    #sort data by xvar
    df = df.sort_values(by=[xvar])
    #get desired label
    try:
      label = 'Aw = '+filecsv.split('-')[1]       #Som et al. 2024
      if default_label == 'Boden2025':
        label = 'W:R = '+filecsv.split('-')[4]    #Boden et al. 2025
    except:
      label = filecsv.split('-')[1]
    #------ start plot styles ----------------------------------------------------------------
    if plot_style == 0: # 1 variable vs another
      _plot_vars(xvar,yvar,df,ax1,label,mStyles[fc],lw=1)
      #reset group vars if needed
      if x_group: xvar = 'group'
      if y_group: yvar = 'group'
    #-----------------------------------------------------------------------------------------
    elif plot_style == 1: # 2 variables vs another
      _plot_vars(xvar,yvar,df,ax1,label,mStyles[fc],lw=1)#,ls=linedesign[fc])
      #reset group vars if needed
      if x_group: xvar = 'group'
      if y_group: yvar = 'group'
      #get user input for second plot
      if fc == 0:
        _ , yvar = _ask_for_plotting_variables(df,second_plot=True)
      #handle the group selection
      df, xvar, yvar, option2, x_group, y_group = _get_species_group(df,xvar,yvar,option2, x_group, y_group)
      #and plot
      label = None
      _plot_vars(xvar,yvar,df,ax1,label,mStyles[fc],lw=1)#,ls=linedesign[fc]) #4 is a linewidth
      plt.legend(loc=2,frameon=False)
      # reset group vars if needed
      if x_group: xvar = 'group'
      if y_group: yvar = 'group'
    #------------------------------------------------------------------------------------------
    elif plot_style == 2: # ratio of 2 variables vs another
      if fc == 0:
        #save selection as numerator
        xvar_num = xvar
        yvar_num = yvar
        #get denominator
        print('Denominator:')
        xvar_denom,yvar_denom = _ask_for_plotting_variables(df)
      #handle the group selection
      df, xvar_denom, yvar_denom, option2, x_group, y_group = _get_species_group(df,xvar_denom,yvar_denom,option2, x_group, y_group)
      #get ratio
      if xvar_num == xvar_denom: #if same request, assume no ratio
        x_ratio = xvar_num
        df[x_ratio] = df[xvar_num]
      else:
        x_ratio = xvar_num+'/'+xvar_denom
        df[x_ratio] = df[xvar_num] / df[xvar_denom]
      if yvar_num == yvar_denom: #if same request, assume no ratio
        y_ratio = yvar_num
        df[y_ratio] = df[yvar_num]
      else:
        y_ratio = yvar_num+'/'+yvar_denom
        df[y_ratio] = df[yvar_num] / df[yvar_denom]
      #and plot
      _plot_vars(x_ratio,y_ratio,df,ax1,label,mStyles[fc],lw=1)
      #plot 1:1 line
      plt.plot(df[x_ratio],df[y_ratio]/df[y_ratio],'k:')
      #reset group vars if needed
      if x_group: xvar = 'group'; xvar_denom = 'group'
      if y_group: yvar = 'group'; yvar_denom = 'group'
    #------------------------------------------------------------------------------------------
    fc = fc+1

  #Add literature values if desired
  if ((yvar == 'H2,aq') or (yvar == 'H2,AQ')) and (xvar == 'Temp'):
    _get_and_plot_literature_H2(cwdpath,plot_lit)
    #ax1.set_ylim([1e-3,1e3])
  elif (yvar == 'pH') and (xvar == 'Temp'):
    _get_and_plot_literature_pH(cwdpath,plot_lit)
  elif (yvar == 'pH') and (xvar == 'Aw'):
    _get_and_plot_fielddata_pHAw(cwdpath,plot_field)
  #legend
  # Shrink current axis by 20%
  box = ax1.get_position()
  ax1.set_position([box.x0, box.y0, box.width * 0.8, box.height])
  # Put a legend to the right of the current axis
  ax1.legend(loc='center left', bbox_to_anchor=(1, 0.5),frameon=False)
  plt.show()

def mineral_superset(cwdpath):
  #Read all output files for plotting
  outpath = cwdpath + 'plotting_files/csv/'
  allfiles = [f for f in os.listdir(outpath)]
  #check if csvs exist
  if not allfiles:
    print('Error: No csvs to process. Create them first.')
    sys.exit()
  #create empty dataframe
  dfm = pd.DataFrame()
  #iterate through all the 6o files
  for csvfile in allfiles:
    df = pd.read_csv(outpath+csvfile)
    bool1 = df.iloc[:,0].str.endswith('out')
    df_minerals=df[bool1].iloc[:,0]
    #remove principal components of solid solutions
    df_minerals = df_minerals[~df_minerals.str.contains('_pcss_')]
    #and concatenate
    dfm = pd.concat([dfm,df_minerals]).drop_duplicates().reset_index(drop=True)
  #add a numerical value that will corespond to index of colormap
  dfm['colors'] = np.arange(int(len(dfm.index)))
  #remove '_out' from mineral name
  newcol = dfm[0].map(lambda x: x.rstrip("_out"))
  dfm = dfm.drop(labels=0,axis="columns")
  dfm.insert(0,"Variables", newcol)
  #organize alphabetically
  dfm = dfm.sort_values("Variables")
  #save to csv so that the next file can use the same colors
  dfm.to_csv('mineral.colors', index=True) 
  os.system('mv mineral.colors plotting_files')
  return dfm

def plot_minerals(dfm, cwdpath, visualize):
  #------- rename columns to make figure pretty -----------
  def _rename_columns(df):
    #translation dictionary
    map_names = {
      'IDEAL-OLIVINE': 'OLIVINE',
      'BRUCITE-SS'   : 'BRUCITE',
      'SERP-SS'      : 'SERPENTINE',
      'TALC-SS'      : 'TALC',
      'MOL.-MIX.-AMPH.': 'AMPHIBOLE',
      'AMPHIB.-TERNARY': 'AMPHIBOLE',
      'FERROUS-OXIDE'  : 'FERROUS OXIDE'
    }
    #map dictionary to dataframe
    df['Phases'] = df['Variables']
    df = df.drop('Variables', axis=1)
    df = df.set_index('Phases')
    df = df.T.rename(columns=map_names).T
    return df
  #--------------------------------------------------------
  outpath = cwdpath + 'plotting_files/csv/'
  allfiles = [f for f in os.listdir(outpath)]
  for filecsv in allfiles:
    df = pd.read_csv(outpath+filecsv)
    df = df.fillna(0.)
    #filter df to extrac Temp and stack above minerals
    bool1 = df["Variables"].str.startswith('Temp')
    #filter df to keep only the minerals
    bool2 = df["Variables"].str.endswith('out')
    dfbool2 = df[bool2]
    newcol = df[bool2]["Variables"].map(lambda x: x.rstrip("_out"))
    dfbool2 = dfbool2.drop(labels="Variables",axis="columns")
    dfbool2.insert(0,"Variables", newcol)
    #rename, concat, and release
    df = pd.concat([df[bool1],dfbool2]); del bool2
    df = df.sort_values("Variables")
    #filter df using superset for minerals for this particular file
    # to assign colorcode from superset
    df_merge = pd.merge(dfm, df, on=['Variables'])
    #add back the temp row from df to the merged dataframe
    df = pd.concat([df_merge, df.iloc[[-1]]], ignore_index=True)
    #request user input on minerals to plot
    df = _ask_mineral_index(df.reset_index(drop=True))
    #assign fixed colors
    colors = _assign_colors(df,dfm,visualize)
    #now that colors are assigned, drop the colors column
    df=df.drop(labels='colors',axis='columns')
    #filter colors and transform into colormap
    from matplotlib.colors import ListedColormap
    colors = ListedColormap(colors)
    #jiggle dataframe
    df = _rename_columns(df) #makes things pretty
    df = df.T.set_index('Temp')
    df = df.sort_values('Temp')
    #normalize
    df = df.divide(df.sum(axis=1), axis=0)
    #stack plot
    ax=df.plot.area(lw=0,colormap=colors,stacked=True,alpha=0.8)
    ax.legend(loc='upper left', title='Phases')
    #niceties
    ax.set_xlabel(r'Temperature [$\circ$C]')
    ax.set_ylabel('Norm. minerals')
    ax.set_ylim([0, 1])
    ax.set_xlim([10, 400])
    #create labels
    #label = 'Aw = '+filecsv.split('-')[1]
    #ax.set_title(label)
    plt.show()

def plot_h2_by_mineral(cwdpath,csv_destination):
  allfiles = [f for f in os.listdir(csv_destination)]
  filename6i = 'serp.6i'
  #check if csvs exist
  if not allfiles:
    print('Error: No csvs to process. Create them first.')
    sys.exit()
  #Get Olivine moles
  minline = eq.findline_in36o('|Reactants',cwdpath+'plotting_files/rock6i/',filename6i)
  #minline = eq.findline_in36o('|Reactants',cwdpath+'output_files/','serp.6i')
  detect_olivine = False
  with open(cwdpath+'plotting_files/rock6i/'+filename6i) as f:
  #with open(cwdpath+'output_files/serp.6i') as f:
    lines = islice(f,minline+1,minline+8)
    for line in lines:
      if ('OLIVINE' or 'Olivine') in line:
        detect_olivine = True
      if 'remaining (moles)' in line:
        OLIVI = float(line.split(' ')[4][:-1]) # Moles
  #Ensure Olivine was in fact detected
  if not detect_olivine:
    print('Olivine was not detected. Check some things.')
    sys.exit()
  #Analysis
  for filecsv in allfiles:
    #open file
    df = pd.read_csv(csv_destination+filecsv).fillna(0)
    df = df.set_index('Variables').T
    #Simplify naming
    CHRYS = df['CHRYSOTILE_pcss_out'] #Moles
    GREEN = df['GREENALITE_pcss_out'] #Moles
    CRONS = df['CRONSTEDTITE_pcss_out'] #Moles 
    MAGNE = df['MAGNETITE_out'] #Moles
    #Calculate Magnesium Number of Serpentine
    Mg_serp = 3.*CHRYS/((3.*CHRYS+GREEN)+4.*CRONS) #Mg/Mg+Fe
    #Calculate ratio of FeIII/Fetotal
    Fe3Fet = 2.*CRONS/(3.*GREEN + 4.*CRONS) #see data0.mbn for multipliers
    #Calculate H2_mineral
    H2_serpentine = df['SERP-SS_out'] * 3. * (1.-Mg_serp) * Fe3Fet * 0.5 / OLIVI #moles /Mole OLIVINE
    H2_serpentine = 1000. * H2_serpentine #Moles --> mMoles 
    H2_serpentine_mmolal = H2_serpentine * OLIVI / (df['Solv_Mass']/1000.) #mMoles --> mmolal 
    H2_magnetite  = 1000.*MAGNE / OLIVI #Moles --> mMoles / Mole OLIVINE
    H2_magnetite_mmolal  = 1000.*MAGNE / (df['Solv_Mass']/1000.) #mMoles --> mmolal
    #and plot
    fig, ax1 = plt.subplots()
    ax2 = ax1.twinx()
    stack1 = ax1.stackplot(df.Temp,H2_serpentine,H2_magnetite)
    stack2 = ax2.plot(df.Temp,H2_serpentine_mmolal+H2_magnetite_mmolal,'k')
    #Make things pretty
    title = 'Aw = '+filecsv.split('-')[1]
    plt.title(title)
    ax1.set_xlabel(r'Temperature [$\circ$C]')
    ax1.set_ylabel(r'H$_2$ generated [mmol/mol olivine]')
    ax1.set_ylim([0, 54.5]) #limit here is chosen such that both stacks overlap
    ax2.set_ylabel(r'H$_2$ generated [mmolal]')
    ax2.set_ylim([0, 350])
    plt.show()

def plot_Fe_content_by_mineral(cwdpath,csv_destination):
  allfiles = [f for f in os.listdir(csv_destination)]
  #check if csvs exist
  if not allfiles:
    print('Error: No csvs to process. Create them first.')
    sys.exit()
  total_plots = 3
  #Analysis
  for p in range(total_plots):
    fig,ax1 = plt.subplots()
    for filecsv in allfiles:
      #open file
      df = pd.read_csv(csv_destination+filecsv).fillna(0)
      df = df.set_index('Variables').T
      #Simplify naming of Serpentine SS
      CHRYS = df['CHRYSOTILE_pcss_out']   #Moles
      GREEN = df['GREENALITE_pcss_out']   #Moles
      CRONS = df['CRONSTEDTITE_pcss_out'] #Moles
      MAGNE = df['MAGNETITE_out']         #Moles
      TSERP = df['SERP-SS_out']           #Moles
      #Simplify naming of Brucite SS
      MgBRU = df['BRUCITE_pcss_out']      #Moles
      FeBRU = df['Fe(OH)2_pcss_out']      #Moles
      TBRUC = df['BRUCITE-SS_out']        #Moles
      #Simplify naming of Olivine         #Moles
      MgOLI = df['FORSTERITE_pcss_out']   #Moles
      FeOLI = df['FAYALITE_pcss_out']     #Moles
      TOLIV = df['IDEAL-OLIVINE_out']     #Moles
      #Calculate X_Mg/Fe of Serpentine, Brucite and Olivine
      X_Fe_serp = 2.*CRONS/(2.*CRONS+3.*GREEN) #Fe3/Fe3+Fe2
      X_Mg_serp = 3.*CHRYS/((3.*CHRYS+GREEN)+4.*CRONS) #Mg/Mg+Fe
      X_Mg_bru = MgBRU/TBRUC
      X_Mg_oli = MgOLI/TOLIV
      #get desired label
      label = 'Aw = '+filecsv.split('-')[1]
      #and plot
      if p == 0:
        plt.plot(df.Temp,100.*X_Fe_serp,label=label,lw=2)
        plt.xlabel(r'Temperature [$\circ$C]')
        plt.ylabel(r'[Fe$^{3+}]$ / [Fe$^{3+}$+Fe$^{2+}$] $\times$ 100')
      elif p == 1:
        plt.plot(df.Temp,X_Mg_serp,label=label,lw=2)
        plt.xlabel(r'Temperature [$\circ$C]')
        plt.ylabel(r'X$_{Mg}$ Serpentine')
      elif p == 2:
        plt.plot(df.Temp,X_Mg_bru,label=label,lw=2)
        plt.xlabel(r'Temperature [$\circ$C]')
        plt.ylabel(r'X$_{Mg}$ Brucite')
      elif p == 3:
        plt.plot(df.Temp,X_Mg_oli,label=label,lw=2)
        plt.xlabel(r'Temperature [$\circ$C]')
        plt.ylabel(r'X$_{Mg}$ Olivine')
      else:
        print('Error: no plotting details listed.');sys.exit()
    #legend
    # Shrink current axis by 20%
    box = ax1.get_position()
    ax1.set_position([box.x0, box.y0, box.width * 0.8, box.height])
    # Put a legend to the right of the current axis
    ax1.legend(loc='center left', bbox_to_anchor=(1, 0.5),frameon=False)
    plt.show()

def csv2ternary(cwdpath,csv_destination,compilfile,mcb=False,springfile='dummy',shade=True):
  #Inspired by https://stackoverflow.com/questions/29512046/
  #  how-to-create-ternary-contour-plot-in-python
  from matplotlib import ticker
  import matplotlib.pyplot as plt
  import matplotlib.tri as tri
  import matplotlib.cm as cm
  import pandas as pd
  import numpy as np
  #open compilation file
  outpath = cwdpath + csv_destination
  df = pd.read_csv(outpath+compilfile)
  #df = df.set_index('Variables')
  #merge compil with odeMethanogen results
  if os.path.exists(outpath+springfile):
    df_ode = pd.read_csv(outpath+springfile).fillna(0)
    df_ode = df_ode.rename(columns={0: "Variables"})
    df_ode.columns = df_ode.columns.str.replace('Unnamed: 0','Variables')
    df_ode = df_ode.drop(['Units'],1).set_index('Variables').T
    #at this point, both df and df_ode have the same format but let's make things easy
    df['DGr_blk']       = df_ode['DGr_blk'].values
    df['Yield_model']   = df_ode['Yield_model'].values
    df['doubling_time'] = df_ode['doubling_time'].values
  else:
    pass
  df = df.set_index('Variables')
  #get user input-------------------------------------------------------
  var = input('Which variable to plot? (or list, or group, or ratio): ')
  ratans = 'n' #default
  if var == 'list':
    print(list(df.T.index))
    var = input('Which variable to plot? ')
  elif (var == 'group'):
    df, var,_,_,_,_ = _get_species_group(df,var,var)
  elif (var == 'ratio'):
    ratans = input('Plotting a group? [y] or [n]: ')
    if ratans == 'n':
      var1 = input('Which variable is numerator? ')
      var2 = input('Which variable is denominator? ')
      var = var1+'/'+var2
      df[var] = df[var1] / df[var2]
    else:
      print('Numerator:')
      df, var1,_,_,_,_ = _get_species_group(df,'group','group')
      print('Denominator:')
      df, var2,_,_,_,_ = _get_species_group(df,'group','group')
      var = var1+'/'+var2
      df[var] = df[var1] / df[var2]
  #end user input -------------------------------------------------------- 
  #Read all output files for plotting
  filelist=os.listdir(outpath)
  #organize around temperature and loop
  Temps = df['Temp'].unique().tolist()
  df_complete = df
  for T in Temps:
    df=df_complete.loc[df_complete['Temp'] == T]
    #add columns for OLI, OPX, CPX
    df=pd.concat([df,pd.DataFrame(columns=['wt% OLI','wt% OPX','wt% CPX'])])
    for index, row in df.iterrows():
      index_ne = index[:-3] #ne: no extension
      minerals = index_ne.split('-')
      #remove spurious empty element
      minerals = [x for x in minerals if x]
      #and assign
      df.loc[index,'wt% OLI'] = float(minerals[-3])
      df.loc[index,'wt% OPX'] = float(minerals[-2])
      df.loc[index,'wt% CPX'] = float(minerals[-1])
    Temp = minerals[2]
    WR   = minerals[4]
    #get correct units
    df_xvar,xunit,xvar,xscale = _get_plot_units(var,df)
    #load data for ternary
    c = df['wt% OLI']
    a = df['wt% OPX']
    b = df['wt% CPX']
    v = df_xvar
    try:
      fig, ax = plt.subplots()
    except:
      print('Error: Cannot connect to display. X-Window is not on.')
      sys.exit()
    # translate the data to cartesian corrds
    x = 50. * ( 2.*b+c ) / ( a+b+c )
    y = 57.6 * np.sqrt(3) * c / (a+b+c)
    # create a triangulation out of these points
    T = tri.Triangulation(x,y)
    # plot the contour; cmap='jet' is pretty but not good for color blind folks
    cmap = cm.terrain_r
    if var == 'target_key':
      ter = plt.tricontourf(x,y,T.triangles,v,cmap=cmap)
      fmt = '%.1f'
    elif var == 'pH':
      levs = np.linspace(7,12,11)
      ter = plt.tricontourf(x,y,T.triangles,v,cmap=cmap,levels=levs)
      fmt = '%.1f'
    elif var == 'H2,aq':
      levs = np.logspace(-2,3,6)
      ter = plt.tricontourf(x,y,T.triangles,v,cmap=cmap,levels=levs,
        locator=ticker.LogLocator())
      fmt = '%.1e'
    elif var == 'CO2,aq':
      levs = np.logspace(-10,2,13)
      ter = plt.tricontourf(x,y,T.triangles,v,cmap=cmap,levels=levs,
        locator=ticker.LogLocator())
      fmt = '%.1e'
    elif var.startswith('DGr'):
      cmap.set_under('w')
      levs = np.linspace(-150,-60,10)
      ter = plt.tricontourf(x,y,T.triangles,v,cmap=cmap,levels=levs)
      fmt = '%.1f'
    elif (var == 'Yield_model'):
      cmap.set_under('w')
      levs = np.logspace(-22,-13,10)
      ter = plt.tricontourf(x,y,T.triangles,v,locator=ticker.LogLocator(),
        vmin = 1e-20,cmap=cmap,levels=levs)
      fmt = '%.1e'
    elif var == 'doubling_time':
      cmap.set_under('w')
      levs = np.logspace(-3,5,9)
      ter = plt.tricontourf(x,y,T.triangles,v,cmap=cmap,levels=levs,
        locator=ticker.LogLocator())
      fmt = '%.1e'
    elif '/' in var:
      #cmap, norm = _get_custom_cmap_ternary(df[var])
      ter = plt.tricontourf(x,y,T.triangles,v,locator=ticker.LogLocator(),
        cmap=cmap)#, norm=norm)#,levels=levs)
      fmt = '%.1e'
    else:
      try:
        loglin = input('Log [1] or linear [2] scale?: ')
        if (loglin == '1') or (loglin == 'log'):
          ter = plt.tricontourf(x,y,T.triangles,v,locator=ticker.LogLocator(),
            cmap=cmap) #orders or magnitude resolution <-------------------------- !
        elif (loglin =='2') or (loglin == 'linear') or (loglin == 'lin'):
          ter = plt.tricontourf(x,y,T.triangles,v,locator=ticker.LogLocator(),
            cmap=cmap,levels=levs) #finer resolution  <-------------------------- !
      except:
        ter = plt.tricontourf(x,y,T.triangles,v,cmap=cmap)
      fmt = '%.1e'
    # create the grid
    corners = np.array([[0, 0], [100, 0], [50,  np.sqrt(3)*57.6]])
    triangle = tri.Triangulation(corners[:, 0], corners[:, 1])
    # creating the grid
    refiner = tri.UniformTriRefiner(triangle)
    trimesh = refiner.refine_triangulation(subdiv=2)
    #get user input to display actual points of data
    datax = input('Show actual location of data? [y] or [n]: ')
    if datax == 'y':
      ter = plt.plot(x,y,'kx')#,T.triangles,v,locator=ticker.LogLocator(),
      plt.show();sys.exit()
    else:
      pass
    #plotting the mesh and calibrate the axis
    plt.triplot(trimesh,'k--')
    plt.gcf().text(0.07, 0.05, 'OPX', fontsize=12,color='black')
    plt.gcf().text(0.93, 0.05, 'CPX', fontsize=12,color='black')
    plt.gcf().text(0.5, 0.9, 'OLI', fontsize=12,color='black')
    plt.gcf().text(0.13, 0.82, 'Max: '+str(fmt%max(v)), fontsize=11,
      color='black')
    plt.gcf().text(0.13, 0.75, 'Min: '+str(fmt%min(v)), fontsize=11,
      color='black')
    plt.gcf().text(0.13, 0.9, 'Temp: '+str(Temp)+' C, WR: '+str(WR),
      fontsize=12,color='black')
    if ratans == 'n':  
      plt.gcf().text(0.69, 0.9, 'Units: '+xunit,fontsize=12,color='black')
    # plot location of McCollom & Bach
    if mcb:
      a = 2.5
      b = 2.5
      c = 95.
      x = 50. * ( 2.*b+c ) / ( a+b+c )
      y = 57.6 * np.sqrt(3) * c / (a+b+c)
      plt.plot(x,y,'ks')
    #set scale for axis
    ax.set_xlim(0, 100)
    ax.set_xticks([0, 25, 50, 75, 100])
    ax.set_ylim(0, 100)
    ax.set_yticks([0, 25, 50, 75, 100])
    #other niceties
    cax = plt.axes([0.72, 0.55, 0.055, 0.3])
    cbar=plt.colorbar(ter,cax=cax,format=fmt)
    cax.yaxis.set_label_position('left')
    cbar.set_label(xvar)#,fontsize=9)
    #include Shaded regions correspond to the compositional space of 
    # terrestrial ophiolitic and orogenic ultramafic rocks
    # Define the vertices of the polygon (e.g., a quadrilateral)
    polygon_vertices = [(20, 40), (50, 100), (52.5, 95), (35, 45)]
    polygon = patches.Polygon(polygon_vertices, closed=True, color="black", edgecolor=None, alpha=0.3)
    ax.add_patch(polygon)
    #tada!
    plt.show()

#######################################################################
# Supporting function
#######################################################################
def _ask_for_plotting_variables(df,second_plot=False):
  #identify which variables are of interest
  yvar=input('Which Y-AXIS variable to plot? (or list, or group): ')
  if (yvar == 'list') or (yvar == 'ls'):
    print(list(df.T.index))
    yvar=input('Which Y-AXIS variable to plot? ')
  #set defaults
  if not yvar: yvar = 'H2,aq'
  #check if second plot flag is passed. If not, ask for x-axis
  if not second_plot:
    xvar=input('Which X-AXIS variable to plot? ')
    if not xvar: xvar = 'Temp'
  else:
    xvar=[] #dummy
  return xvar,yvar

def _plot_vars(x_var,y_var,df,ax,label,mStyle,lw=1,ls=None,lt=None,default_label=None):
    import numpy as np
    import matplotlib.pyplot as plt

    #def __force_label(desired_label):
    #  if default_label is not None:
    #    desired_label = default_label
    #  else:
    #    pass
    #  return desired_label
    yvar_orig = y_var
    df_xvar,xunit,x_var,xscale = _get_plot_units(x_var,df)
    df_yvar,yunit,y_var,yscale = _get_plot_units(y_var,df)
    #and plot
    plt.xlabel(' '.join([x_var,xunit]))
    plt.ylabel(' '.join([y_var,yunit]))
    #yvar = __force_label(yvar)
    plt.plot(df_xvar,df_yvar,marker=mStyle,label=label,linewidth=lw,color='k')
    ax.set_yscale(yscale)
    ax.set_xscale(xscale)

def _get_plot_units(varstr,df):
    if varstr == 'WR':
      var    = df[varstr]
      unit   = ''
      varstr = 'W:R'
      scale  = 'log'
    elif varstr == 'Temp':
      var    = df[varstr]
      unit   = r'[$\circ$C]'
      varstr = 'Temperature'
      scale  = 'linear'
    elif varstr == 'pH':
      var    = df[varstr]
      unit   = ''
      varstr = 'pH'
      scale  = 'linear'
    elif varstr == 'Aw':
      var    = df[varstr]
      unit   = ''
      varstr = 'Water Activity (Aw)'
      scale  = 'linear'
    elif varstr == 'Solv_Mass':
      var    = df[varstr]
      unit   = '[g]'
      varstr = 'Water mass'
      scale  = 'linear'
    elif varstr == 'TDS%':
      var    = df[varstr]
      unit   = '[%]'
      varstr = 'TDS'
      scale  = 'linear'
    elif varstr == 'TDS':
      var    = df[varstr]
      unit   = '[g/L]'
      varstr = 'TDS'
      scale  = 'linear'
    elif varstr == 'density':
      var    = df[varstr]
      unit   = '[g/L]'
      varstr = 'Density'
      scale  = 'linear'    
    elif varstr == 'Xi':
      var    = df[varstr]
      unit   = ''
      varstr = r'Reaction progress $\xi$'
      scale  = 'linear'
    elif '/' in varstr:
      var    = df[varstr]
      unit   = ''
      scale  = 'log'
    elif 'hosph' in varstr: 
      var    = df[varstr]*1e12
      unit   = '[pmolal]'
      scale  = 'linear'
    elif varstr.startswith('g'):
      var    = 10.**df[varstr]
      unit   = ''
      varstr = r'Activity coefficient: $\gamma$'+varstr[1:]
      scale  = 'linear'
    elif '_out' in varstr: #minerals
      try:
        var    = df[varstr]
      except:
        try:
          df[varstr] = df['Temp']
          df[varstr].iloc[:] = 0.00 
          var    = df[varstr]
        except:
          var = 0
          print('Caution: The Mineral '+varstr+' is likely suppressed or dropped. Setting to zero.')
      #mineral output is moles, so divide by solvent mass
      denom  = df['Solv_Mass']/1000. # g --> kg
      var = var/denom
      varstr = varstr[:-4].capitalize() #remove '_out'
      unit   = r'[Moles/kg. H$_2$O]'
      scale  = 'linear'
    else:
      try:
        var    = df[varstr]*1000.
      except:
        df[varstr] = df['Temp']
        df[varstr].iloc[:] = 0.00 
        var    = df[varstr]
      unit   = '[mmolal]'
      scale  = 'linear' #<------- !
    return var,unit,varstr,scale

def _get_species_group(df,xvar,yvar,option=0,xg=False,yg=False):
  if ((xvar == 'group') or (yvar == 'group')) and (option == 0):
    print('Select group of interest:')
    print('1: Carbonate minerals')
    print('2: Phosphates')
    print('3: Phosphites')
    print('4: Pyrophosphates')
    print('5: Hypophosphites')
    option=int(input('Enter choice: '))
    show_species = True
  else:
    show_species = False
  #get species
  if xvar == 'group':
    xg = True
    df,xvar,option = __sum_species_from_group(df,xvar,option,show_species)
    return df, xvar, yvar, option, xg, yg
  elif yvar == 'group':
    yg = True
    df,yvar,option = __sum_species_from_group(df,yvar,option,show_species)
    return df, xvar, yvar, option, xg, yg
  else:  
    return df, xvar, yvar, option, xg, yg

def __sum_species_from_group(df,var,option,show):
  if option == 1:
    df, var = _get_carbonates(df, show)
  elif option == 2:
    df, var = _get_phosphates(df, show)
  elif option == 3:
    df, var = _get_phosphites(df, show)
  elif option == 4:
    df, var = _get_pyrophosphates(df, show)
  elif option == 5:
    df, var = _get_hypophosphites(df, show)
  else:
    pass
  return df, var, option

def _get_phosphates(df, show):
    phosphates_tde=['HPO4-2', 'PO4-3', 'H2PO4-', 'H3PO4,AQ']
    if show:
      print('Array of species summed is:')
      print(phosphates_tde)
    phosphates = phosphates_tde
    #create phosphates column
    var = 'Phosphates'
    df[var] = 0
    for species in phosphates:
      try:
        df[species]
        df[var] = df[var] + df[species]
      except:
        continue
    return df, var

def _get_phosphites(df, show):
    phosphites_tde=['HPO3-2', 'H2PO3-', 'H3PO3,AQ']
    if show:
      print('Array of species summed is:')
      print(phosphites_tde)
    phosphites = phosphites_tde
    #create phopshites column
    var = 'Phosphites'
    df[var] = 0
    for species in phosphites:
      try:
        df[species]
        df[var] = df[var] + df[species]
      except:
        continue
    return df, var

def _get_pyrophosphates(df, show):
    pyrophosphates_tde=['P2O7-4', 'HP2O7-3', 'H2P2O7-2', 'H3P2O7-', 'H4P2O7,AQ']
    if show:
      print('Array of species summed is:')
      print(pyrophosphates_tde)
    pyrophosphates = pyrophosphates_tde
    #create pyrophosphates column
    var = 'Pyrophosphates'
    df[var] = 0
    for species in pyrophosphates:
      try:
        df[species]
        df[var] = df[var] + df[species]
      except:
        continue
    return df, var

def _get_hypophosphites(df, show):
    hypophosphites_tde=['H2PO2-','H3PO2,AQ']
    if show:
      print('Array of species summed is:')
      print(hypophosphites_tde)
    hypophosphites = hypophosphites_tde
    #create pyrophosphates column
    var = 'Hypophosphites'
    df[var] = 0
    for species in hypophosphites:
      try:
        df[species]
        df[var] = df[var] + df[species]
      except:
        continue
    return df, var


def _get_carbonates(df, show):
    carbonates_mbn=['ARAGONITE', 'ARTINITE','AZURITE','CALCITE','CERUSSITE',
                'DOLOMITE', 'DOLOMITE,DISORDERED','DOLOMITE,ORDERED',
                'HUNTITE','HYDROMAGNESITE','MAGNESITE','MALACHITE',
                'NESQUEHONITE','RHODOCHROSITE','SIDERITE','SMITHSONITE',
                'STRONTIANITE','WITHERITE','Carbonate-Calcite',
                'Calcite-SS']
    carbonates_ypf=['Siderite','Hydromagnesite','Artinite','Nesquehonite','Calcite',
                'Magnesite','Aragonite','Huntite','Dolomite']
    carbonates = carbonates_mbn + carbonates_ypf
    #add the mineral suffix for consistency
    carbonates = [x+'_out' for x in carbonates]
    var = 'Carbonates'
    #create carbonates column
    df[var] = 0
    for solid in carbonates:
      try:
        df[solid]
        df[var] = df[var] + df[solid]
      except:
        continue
    return df, var

def _get_and_plot_literature_pH(cwdpath,Doit):
  if Doit:
    #open file
    mccollomfile = 'plotting_files/literature/McCollomBach2009_pH_Ol85_Opx10_Cpx5.csv'
    df2 = pd.read_csv(cwdpath+mccollomfile)
    plt.plot(df2.Temp, df2.pH,color='0', ls='--', lw=2, label='McCollom and Bach 2009')
    neutralphfile = 'plotting_files/reference/neutral_pH.csv'
    df3 = pd.read_csv(cwdpath+neutralphfile)
    plt.plot(df3.Temp, df3.pH,color='0', ls='-', lw=3, label='Neutral pH')

def _get_and_plot_literature_H2(cwdpath,Doit):
  if Doit:
    #open file
    kleinfile    = 'plotting_files/literature/klein2013_H2_Ol80_Opx10_Cpx10.csv'
    mccollomfile = 'plotting_files/literature/McCollomBach2009_H2_Ol85_Opx10_Cpx5.csv'
    df  = pd.read_csv(cwdpath+kleinfile)
    df1 = pd.read_csv(cwdpath+mccollomfile)
    plt.plot(df.Temp, df.H2,color='0', ls='-', lw=2, label='Klein et al. 2013')
    plt.plot(df1.Temp, df1.H2,color='0', ls='--', lw=2, label='McCollom and Bach 2009')

def _get_and_plot_fielddata_pHAw(cwdpath,Doit):
  if Doit:
    symbsize=10
    sbsw_s1, = plt.plot(0.697,6.97,color='#E05252',marker='>',markersize=symbsize,label='Site 1',linestyle='None')
    sbsw_s2t, = plt.plot(0.9415,8.16,color='#263F73',marker='o',markersize=symbsize,label='Site 2t',linestyle='None')
    sbsw_s2b, = plt.plot(0.9356,8.03,color='#263F73',marker='s',markersize=symbsize,label='Site 2b',linestyle='None')
    sbsw_s3, = plt.plot(0.6364,6.44,color='#E05252',marker='o',markersize=symbsize,label='Site 3',linestyle='None')
    sbsw_s4, = plt.plot(0.3923,5.3,color='#AACC66', marker='D',markersize=symbsize,label='Site 4',linestyle='None')
    sbsw_s5, = plt.plot(0.4863,5.70,color='#AACC66',marker='<',markersize=symbsize,label='Site 5',linestyle='None')
    sbsw_s6, = plt.plot(0.6819,6.83,color='#E05252',marker='s',markersize=symbsize,label='Site 6',linestyle='None')
    sbsw_s7, = plt.plot(0.7062,6.96,color='#E05252',marker='^',markersize=symbsize,label='Site 7',linestyle='None')
    sbsw_s8, = plt.plot(0.6760,6.68,color='#E05252',marker='v',markersize=symbsize,label='Site 8',linestyle='None')

def _ask_mineral_index(df):
    print(df["Variables"][:-1]) #part of the code, not a debug. leave it there.
    delvar = input('Enter indices of minerals to remove (or leave blank to include all): ')
    if not delvar: pass
    else:
      try:
        delvar = [int(x) for x in list(delvar.split(','))]
      except:
        print('Please use only indices (first column) separated by commas.')
        _ask_mineral_index(df)
      #remove selected minerals
      [df.drop(labels=i,axis=0,inplace=True) for i in delvar]
    return df

def _assign_colors(df,dfm,visualize):
  #automatic color selection (works okay, but less control on esthetics
  seed = 10 
  np.random.seed(seed)
  colorwheel = 'tab10'
  cmap = plt.get_cmap(colorwheel)
  #print('Colorwheel is '+colorwheel)
  num_colors = 20 
  values = np.linspace(0,1,num_colors)
  colors = cmap(np.random.permutation(values))
  #randomly re-arrange rows so that colors don't follow each other
  nrows = colors.shape[0]
  random_indices = np.random.permutation(nrows)
  colors = colors[random_indices]
  # manual override of color selection to control esthetics - selects 20 colors
  colors = __manual_colorwheel(visualize)
  #set the number of colors equal to the number of total minerals
  color_index = df['colors'].dropna().values.tolist()
  color_index = [int(x) for x in color_index]
  colors=colors[color_index]
  return colors
  
def __manual_colorwheel(visualize=False):
  colors = np.array([
    [0.83921569, 0.15294118, 0.15686275, 1.0],  #reddish
    [0.12156863, 0.46666667, 0.70588235, 1.0],  #blueish
    [0.17254902, 0.62745098, 0.17254902, 1.0],  #green
    [1.0, 0.49803922, 0.05490196, 1.0],         #orange
    [0.58039216, 0.40392157, 0.74117647, 1.0],  #purple
    [0.54901961, 0.3372549, 0.29411765, 1.0],   #brown
    [0.89019608, 0.46666667, 0.76078431, 1.0],  #pink
    [0.7372549, 0.74117647, 0.13333333, 1.0],   #yellow
    [0.09019608, 0.74509804, 0.81176471, 1.0],  #teal
    [0.0, 0.0, 0.0, 1.0],                       #Black
    [1.0, 0.0, 0.0, 1.0],                       #Red 
    [0.0, 1.0, 0.0, 1.0],                       #Green   
    [1.0, 1.0, 0.0, 1.0],                       #Yellow
    [0.0, 0.0, 1.0, 1.0],                       #Blue
    [1.0, 0.0, 1.0, 1.0],                       #Magenta
    [0.0, 1.0, 1.0, 1.0],                       #Cyan
    [0.5, 0.5, 0.5, 1.0],                       #Aqua
    [0.62745098, 0.32156863, 0.17647059, 1.0],  #Gray
    [0.32156863, 0.63921569, 0.23529412, 1.0],  #Sienna
    [0.80392157, 0.44313725, 0.3372549, 1.0]    #Tomato
  ])
  if visualize:
    # Create a color wheel plot
    angles = np.linspace(0, 2 * np.pi, len(colors), endpoint=False)
    angles = np.concatenate((angles, [angles[0]]))  # Close the loop
    fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
    ax.set_xticks(angles[:-1])
    ax.set_xticklabels(range(1, len(colors) + 1))
    ax.set_yticklabels([])

    # Plot the colors on the wheel
    for i, color in enumerate(colors):
      ax.fill_between([angles[i], angles[i + 1]], 0, 1, color=color)
  plt.show()  
  return colors


def _get_custom_cmap_ternary(df):
  # Choose 10 distinct blues with higher contrast
  blues = ['#08306b', '#08519c', '#2171b5', '#4292c6', '#6baed6', '#9ecae1', '#c6dbef', '#deebf7', '#f7fbff', '#eff3ff']
  cmap_low = ListedColormap(blues)
  # Choose 10 distinct reds with higher contrast
  reds = ['#67000d', '#a50f15', '#cb181d', '#ef3b2c', '#fb6a4a', '#fc9272', '#fcbba1', '#fee0d2', '#fff5f0', '#fff5f0']
  cmap_high = ListedColormap(reds)
  # Combine the two colormaps into a diverging colormap
  cmap = ListedColormap(list(blues) + list(reds))
  # Set the range for the colormap
  vmin, vmax = df.min(), df.max()
  midpoint = 1
  # Create a diverging normalization
  norm = LogNorm(vmin=vmin, vcenter=midpoint, vmax=vmax)
  return cmap, norm
